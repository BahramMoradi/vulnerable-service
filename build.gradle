plugins {
    id 'org.springframework.boot' version '2.3.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id 'org.unbroken-dome.test-sets' version '3.0.1'
    //id 'com.palantir.docker' version '0.22.1'
}

group = 'ufst.ess.pocs.apps.gateway'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

apply plugin: 'groovy'
apply plugin: 'org.unbroken-dome.test-sets'

testSets {
    integrationTest { dirName = 'integration-test'}
}

integrationTest.dependsOn test
integrationTest.mustRunAfter test

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "Hoxton.SR8")
}

dependencies {
    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes-all'
    implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'

    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation group: 'org.springdoc', name: 'springdoc-openapi-webflux-core', version: '1.4.8'
    //test
    testCompile group: 'org.spockframework', name: 'spock-spring', version: '1.3-groovy-2.5'
    testCompile 'io.projectreactor.tools:blockhound:1.0.4.RELEASE'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation("com.squareup.okhttp3:mockwebserver:4.2.1")
    testImplementation("com.squareup.okhttp3:okhttp:4.2.1")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}
tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}
integrationTest {
    testLogging {
        showStandardStreams = true
    }
}

bootJar {
    layered()
}
